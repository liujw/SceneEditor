//hColor32.cpp
#include "hColor32.h"

static unsigned char _color_table[256*3]={
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 
    0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 
    0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 
    0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 
    0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 
    0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 
    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
    
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
const  unsigned char*  color_table=&_color_table[256];



static long _divAlpha_table_16[256]={
    0x00010000, 0x00010000, 0x00008000, 0x00005555, 0x00004000, 0x00003333, 0x00002AAA, 0x00002492, 
    0x00002000, 0x00001C71, 0x00001999, 0x00001745, 0x00001555, 0x000013B1, 0x00001249, 0x00001111, 
    0x00001000, 0x00000F0F, 0x00000E38, 0x00000D79, 0x00000CCC, 0x00000C30, 0x00000BA2, 0x00000B21, 
    0x00000AAA, 0x00000A3D, 0x000009D8, 0x0000097B, 0x00000924, 0x000008D3, 0x00000888, 0x00000842, 
    0x00000800, 0x000007C1, 0x00000787, 0x00000750, 0x0000071C, 0x000006EB, 0x000006BC, 0x00000690, 
    0x00000666, 0x0000063E, 0x00000618, 0x000005F4, 0x000005D1, 0x000005B0, 0x00000590, 0x00000572, 
    0x00000555, 0x00000539, 0x0000051E, 0x00000505, 0x000004EC, 0x000004D4, 0x000004BD, 0x000004A7, 
    0x00000492, 0x0000047D, 0x00000469, 0x00000456, 0x00000444, 0x00000432, 0x00000421, 0x00000410, 
    0x00000400, 0x000003F0, 0x000003E0, 0x000003D2, 0x000003C3, 0x000003B5, 0x000003A8, 0x0000039B, 
    0x0000038E, 0x00000381, 0x00000375, 0x00000369, 0x0000035E, 0x00000353, 0x00000348, 0x0000033D, 
    0x00000333, 0x00000329, 0x0000031F, 0x00000315, 0x0000030C, 0x00000303, 0x000002FA, 0x000002F1, 
    0x000002E8, 0x000002E0, 0x000002D8, 0x000002D0, 0x000002C8, 0x000002C0, 0x000002B9, 0x000002B1, 
    0x000002AA, 0x000002A3, 0x0000029C, 0x00000295, 0x0000028F, 0x00000288, 0x00000282, 0x0000027C, 
    0x00000276, 0x00000270, 0x0000026A, 0x00000264, 0x0000025E, 0x00000259, 0x00000253, 0x0000024E, 
    0x00000249, 0x00000243, 0x0000023E, 0x00000239, 0x00000234, 0x00000230, 0x0000022B, 0x00000226, 
    0x00000222, 0x0000021D, 0x00000219, 0x00000214, 0x00000210, 0x0000020C, 0x00000208, 0x00000204, 
    0x00000200, 0x000001FC, 0x000001F8, 0x000001F4, 0x000001F0, 0x000001EC, 0x000001E9, 0x000001E5, 
    0x000001E1, 0x000001DE, 0x000001DA, 0x000001D7, 0x000001D4, 0x000001D0, 0x000001CD, 0x000001CA, 
    0x000001C7, 0x000001C3, 0x000001C0, 0x000001BD, 0x000001BA, 0x000001B7, 0x000001B4, 0x000001B2, 
    0x000001AF, 0x000001AC, 0x000001A9, 0x000001A6, 0x000001A4, 0x000001A1, 0x0000019E, 0x0000019C, 
    0x00000199, 0x00000197, 0x00000194, 0x00000192, 0x0000018F, 0x0000018D, 0x0000018A, 0x00000188, 
    0x00000186, 0x00000183, 0x00000181, 0x0000017F, 0x0000017D, 0x0000017A, 0x00000178, 0x00000176, 
    0x00000174, 0x00000172, 0x00000170, 0x0000016E, 0x0000016C, 0x0000016A, 0x00000168, 0x00000166, 
    0x00000164, 0x00000162, 0x00000160, 0x0000015E, 0x0000015C, 0x0000015A, 0x00000158, 0x00000157, 
    0x00000155, 0x00000153, 0x00000151, 0x00000150, 0x0000014E, 0x0000014C, 0x0000014A, 0x00000149, 
    0x00000147, 0x00000146, 0x00000144, 0x00000142, 0x00000141, 0x0000013F, 0x0000013E, 0x0000013C, 
    0x0000013B, 0x00000139, 0x00000138, 0x00000136, 0x00000135, 0x00000133, 0x00000132, 0x00000130, 
    0x0000012F, 0x0000012E, 0x0000012C, 0x0000012B, 0x00000129, 0x00000128, 0x00000127, 0x00000125, 
    0x00000124, 0x00000123, 0x00000121, 0x00000120, 0x0000011F, 0x0000011E, 0x0000011C, 0x0000011B, 
    0x0000011A, 0x00000119, 0x00000118, 0x00000116, 0x00000115, 0x00000114, 0x00000113, 0x00000112, 
    0x00000111, 0x0000010F, 0x0000010E, 0x0000010D, 0x0000010C, 0x0000010B, 0x0000010A, 0x00000109, 
    0x00000108, 0x00000107, 0x00000106, 0x00000105, 0x00000104, 0x00000103, 0x00000102, 0x00000101
};
const  long*  divAlpha_table_16=&_divAlpha_table_16[0]; //if (alpha!=0) return (1<<16)/alpha; else return (1<<16);

static UInt32  _gray_paltette256[256]={
    0xFF000000, 0xFF010101, 0xFF020202, 0xFF030303, 0xFF040404, 0xFF050505, 0xFF060606, 0xFF070707, 
    0xFF080808, 0xFF090909, 0xFF0A0A0A, 0xFF0B0B0B, 0xFF0C0C0C, 0xFF0D0D0D, 0xFF0E0E0E, 0xFF0F0F0F, 
    0xFF101010, 0xFF111111, 0xFF121212, 0xFF131313, 0xFF141414, 0xFF151515, 0xFF161616, 0xFF171717, 
    0xFF181818, 0xFF191919, 0xFF1A1A1A, 0xFF1B1B1B, 0xFF1C1C1C, 0xFF1D1D1D, 0xFF1E1E1E, 0xFF1F1F1F, 
    0xFF202020, 0xFF212121, 0xFF222222, 0xFF232323, 0xFF242424, 0xFF252525, 0xFF262626, 0xFF272727, 
    0xFF282828, 0xFF292929, 0xFF2A2A2A, 0xFF2B2B2B, 0xFF2C2C2C, 0xFF2D2D2D, 0xFF2E2E2E, 0xFF2F2F2F, 
    0xFF303030, 0xFF313131, 0xFF323232, 0xFF333333, 0xFF343434, 0xFF353535, 0xFF363636, 0xFF373737, 
    0xFF383838, 0xFF393939, 0xFF3A3A3A, 0xFF3B3B3B, 0xFF3C3C3C, 0xFF3D3D3D, 0xFF3E3E3E, 0xFF3F3F3F, 
    0xFF404040, 0xFF414141, 0xFF424242, 0xFF434343, 0xFF444444, 0xFF454545, 0xFF464646, 0xFF474747, 
    0xFF484848, 0xFF494949, 0xFF4A4A4A, 0xFF4B4B4B, 0xFF4C4C4C, 0xFF4D4D4D, 0xFF4E4E4E, 0xFF4F4F4F, 
    0xFF505050, 0xFF515151, 0xFF525252, 0xFF535353, 0xFF545454, 0xFF555555, 0xFF565656, 0xFF575757, 
    0xFF585858, 0xFF595959, 0xFF5A5A5A, 0xFF5B5B5B, 0xFF5C5C5C, 0xFF5D5D5D, 0xFF5E5E5E, 0xFF5F5F5F, 
    0xFF606060, 0xFF616161, 0xFF626262, 0xFF636363, 0xFF646464, 0xFF656565, 0xFF666666, 0xFF676767, 
    0xFF686868, 0xFF696969, 0xFF6A6A6A, 0xFF6B6B6B, 0xFF6C6C6C, 0xFF6D6D6D, 0xFF6E6E6E, 0xFF6F6F6F, 
    0xFF707070, 0xFF717171, 0xFF727272, 0xFF737373, 0xFF747474, 0xFF757575, 0xFF767676, 0xFF777777, 
    0xFF787878, 0xFF797979, 0xFF7A7A7A, 0xFF7B7B7B, 0xFF7C7C7C, 0xFF7D7D7D, 0xFF7E7E7E, 0xFF7F7F7F, 
    0xFF808080, 0xFF818181, 0xFF828282, 0xFF838383, 0xFF848484, 0xFF858585, 0xFF868686, 0xFF878787, 
    0xFF888888, 0xFF898989, 0xFF8A8A8A, 0xFF8B8B8B, 0xFF8C8C8C, 0xFF8D8D8D, 0xFF8E8E8E, 0xFF8F8F8F, 
    0xFF909090, 0xFF919191, 0xFF929292, 0xFF939393, 0xFF949494, 0xFF959595, 0xFF969696, 0xFF979797, 
    0xFF989898, 0xFF999999, 0xFF9A9A9A, 0xFF9B9B9B, 0xFF9C9C9C, 0xFF9D9D9D, 0xFF9E9E9E, 0xFF9F9F9F, 
    0xFFA0A0A0, 0xFFA1A1A1, 0xFFA2A2A2, 0xFFA3A3A3, 0xFFA4A4A4, 0xFFA5A5A5, 0xFFA6A6A6, 0xFFA7A7A7, 
    0xFFA8A8A8, 0xFFA9A9A9, 0xFFAAAAAA, 0xFFABABAB, 0xFFACACAC, 0xFFADADAD, 0xFFAEAEAE, 0xFFAFAFAF, 
    0xFFB0B0B0, 0xFFB1B1B1, 0xFFB2B2B2, 0xFFB3B3B3, 0xFFB4B4B4, 0xFFB5B5B5, 0xFFB6B6B6, 0xFFB7B7B7, 
    0xFFB8B8B8, 0xFFB9B9B9, 0xFFBABABA, 0xFFBBBBBB, 0xFFBCBCBC, 0xFFBDBDBD, 0xFFBEBEBE, 0xFFBFBFBF, 
    0xFFC0C0C0, 0xFFC1C1C1, 0xFFC2C2C2, 0xFFC3C3C3, 0xFFC4C4C4, 0xFFC5C5C5, 0xFFC6C6C6, 0xFFC7C7C7, 
    0xFFC8C8C8, 0xFFC9C9C9, 0xFFCACACA, 0xFFCBCBCB, 0xFFCCCCCC, 0xFFCDCDCD, 0xFFCECECE, 0xFFCFCFCF, 
    0xFFD0D0D0, 0xFFD1D1D1, 0xFFD2D2D2, 0xFFD3D3D3, 0xFFD4D4D4, 0xFFD5D5D5, 0xFFD6D6D6, 0xFFD7D7D7, 
    0xFFD8D8D8, 0xFFD9D9D9, 0xFFDADADA, 0xFFDBDBDB, 0xFFDCDCDC, 0xFFDDDDDD, 0xFFDEDEDE, 0xFFDFDFDF, 
    0xFFE0E0E0, 0xFFE1E1E1, 0xFFE2E2E2, 0xFFE3E3E3, 0xFFE4E4E4, 0xFFE5E5E5, 0xFFE6E6E6, 0xFFE7E7E7, 
    0xFFE8E8E8, 0xFFE9E9E9, 0xFFEAEAEA, 0xFFEBEBEB, 0xFFECECEC, 0xFFEDEDED, 0xFFEEEEEE, 0xFFEFEFEF, 
    0xFFF0F0F0, 0xFFF1F1F1, 0xFFF2F2F2, 0xFFF3F3F3, 0xFFF4F4F4, 0xFFF5F5F5, 0xFFF6F6F6, 0xFFF7F7F7, 
    0xFFF8F8F8, 0xFFF9F9F9, 0xFFFAFAFA, 0xFFFBFBFB, 0xFFFCFCFC, 0xFFFDFDFD, 0xFFFEFEFE, 0xFFFFFFFF 
};
const  Color32* gray_paltette256=(const  Color32*)&_gray_paltette256[0];


void Color32::toColorText(String& out_result)const{
    out_result.resize(4*2+1);
    out_result[0]='$';  //!
    //UInt32  colorValue=b | (g<<8)| (r<<16)| (a<<24);
    UInt32  colorValue=r | (g<<8)| (b<<16)| (a<<24);//兼容电脑上的客户端
    IntToHex(colorValue,&out_result[1],8);
}

bool Color32::fromColorText_try(const char* colorText,long strLength){
    if (strLength<=0) return false;
    UInt32  colorValue;
    bool isDefaultAlpha=false;
    
    if (colorText[0]=='$'){  //$
        ++colorText;
        --strLength;
        long hexLength=checkHexStrLength(colorText,strLength);
        if (hexLength<=0) return false;
        isDefaultAlpha=(hexLength<=6);
        colorValue=HexToInt(colorText, strLength);
    }else if (colorText[0]=='0'){ //0x
        if (strLength==1) {
            colorValue=0;
            isDefaultAlpha=true;
        }else {
            if (upperCaseChar(colorText[1])!='X') return false;
            colorText+=2;
            strLength-=2;
            
            long hexLength=checkHexStrLength(colorText,strLength);
            if (hexLength<=0) return false;
            isDefaultAlpha=(hexLength<=6);
            colorValue=HexToInt(colorText, strLength);
        }
    }else{
        long intLength=checkIntStrLength(colorText,strLength);
        if (intLength<=0) return false;
        atoi(colorText,strLength,(Int32&)colorValue);
        isDefaultAlpha=(colorValue<=((1<<24)-1));
    }
    b=(UInt8)colorValue;
    g=(UInt8)(colorValue>>8);
    r=(UInt8)(colorValue>>16);
    if (isDefaultAlpha)
        a=255;
    else
        a=(UInt8)(colorValue>>24);	
    STD::swap(r,b);//兼容电脑上的客户端
    return true;
}
