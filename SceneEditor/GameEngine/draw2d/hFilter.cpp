//hFilter.cpp

#include "hFilter.h"

static double SinXDivX(double x) 
{
    //该函数计算插值曲线sin(x*PI)/(x*PI)的值 //PI=3.1415926535897932385; 
    //下面是它的近似拟合表达式
    const double a = -0.75; //a还可以取 a=-2,-1,-0.75,-0.5等等，起到调节锐化或模糊程度的作用
    
    if (x<0) x=-x; //x=abs(x);
    double x2=x*x;
    double x3=x2*x;
    if (x<=1)
        return (a+2)*x3 - (a+3)*x2 + 1;
    else if (x<=2) 
        return a*x3 - (5*a)*x2 + (8*a)*x - (4*a);
    else
        return 0;
} 

#ifdef MMX_ACTIVE

typedef   unsigned long TMMXData32;
static TMMXData32 SinXDivX_Table_MMX[(2<<8)+1]={
    0x40004000, 0x40004000, 0x3FFE3FFE, 0x3FFC3FFC, 0x3FF83FF8, 0x3FF43FF4, 0x3FEE3FEE, 0x3FE83FE8, 0x3FE03FE0, 0x3FD83FD8, 0x3FCF3FCF, 0x3FC53FC5, 0x3FBA3FBA, 0x3FAE3FAE, 0x3FA13FA1, 0x3F933F93, 
    0x3F843F84, 0x3F743F74, 0x3F643F64, 0x3F523F52, 0x3F403F40, 0x3F2D3F2D, 0x3F183F18, 0x3F033F03, 0x3EEE3EEE, 0x3ED73ED7, 0x3EBF3EBF, 0x3EA73EA7, 0x3E8D3E8D, 0x3E733E73, 0x3E583E58, 0x3E3D3E3D, 
    0x3E203E20, 0x3E033E03, 0x3DE43DE4, 0x3DC53DC5, 0x3DA63DA6, 0x3D853D85, 0x3D643D64, 0x3D413D41, 0x3D1E3D1E, 0x3CFB3CFB, 0x3CD63CD6, 0x3CB13CB1, 0x3C8B3C8B, 0x3C643C64, 0x3C3D3C3D, 0x3C153C15, 
    0x3BEC3BEC, 0x3BC23BC2, 0x3B983B98, 0x3B6D3B6D, 0x3B413B41, 0x3B153B15, 0x3AE83AE8, 0x3ABA3ABA, 0x3A8C3A8C, 0x3A5C3A5C, 0x3A2D3A2D, 0x39FC39FC, 0x39CB39CB, 0x39993999, 0x39673967, 0x39343934, 
    0x39003900, 0x38CC38CC, 0x38973897, 0x38613861, 0x382B382B, 0x37F437F4, 0x37BD37BD, 0x37853785, 0x374C374C, 0x37133713, 0x36DA36DA, 0x369F369F, 0x36653665, 0x36293629, 0x35ED35ED, 0x35B135B1, 
    0x35743574, 0x35363536, 0x34F834F8, 0x34BA34BA, 0x347B347B, 0x343B343B, 0x33FB33FB, 0x33BB33BB, 0x337A337A, 0x33383338, 0x32F632F6, 0x32B332B3, 0x32703270, 0x322D322D, 0x31E931E9, 0x31A531A5, 
    0x31603160, 0x311B311B, 0x30D530D5, 0x308F308F, 0x30493049, 0x30023002, 0x2FBA2FBA, 0x2F732F73, 0x2F2A2F2A, 0x2EE22EE2, 0x2E992E99, 0x2E502E50, 0x2E062E06, 0x2DBC2DBC, 0x2D722D72, 0x2D272D27, 
    0x2CDC2CDC, 0x2C912C91, 0x2C452C45, 0x2BF92BF9, 0x2BAC2BAC, 0x2B602B60, 0x2B132B13, 0x2AC52AC5, 0x2A782A78, 0x2A2A2A2A, 0x29DB29DB, 0x298D298D, 0x293E293E, 0x28EF28EF, 0x289F289F, 0x28502850, 
    0x28002800, 0x27B027B0, 0x27602760, 0x270F270F, 0x26BE26BE, 0x266D266D, 0x261C261C, 0x25CA25CA, 0x25782578, 0x25272527, 0x24D424D4, 0x24822482, 0x24302430, 0x23DD23DD, 0x238A238A, 0x23372337, 
    0x22E422E4, 0x22912291, 0x223D223D, 0x21EA21EA, 0x21962196, 0x21422142, 0x20EE20EE, 0x209A209A, 0x20462046, 0x1FF11FF1, 0x1F9D1F9D, 0x1F481F48, 0x1EF31EF3, 0x1E9F1E9F, 0x1E4A1E4A, 0x1DF51DF5, 
    0x1DA01DA0, 0x1D4B1D4B, 0x1CF61CF6, 0x1CA11CA1, 0x1C4C1C4C, 0x1BF61BF6, 0x1BA11BA1, 0x1B4C1B4C, 0x1AF61AF6, 0x1AA11AA1, 0x1A4C1A4C, 0x19F719F7, 0x19A119A1, 0x194C194C, 0x18F718F7, 0x18A118A1, 
    0x184C184C, 0x17F717F7, 0x17A217A2, 0x174C174C, 0x16F716F7, 0x16A216A2, 0x164D164D, 0x15F815F8, 0x15A415A4, 0x154F154F, 0x14FA14FA, 0x14A514A5, 0x14511451, 0x13FD13FD, 0x13A813A8, 0x13541354, 
    0x13001300, 0x12AC12AC, 0x12581258, 0x12051205, 0x11B111B1, 0x115E115E, 0x110A110A, 0x10B710B7, 0x10641064, 0x10121012, 0x0FBF0FBF, 0x0F6D0F6D, 0x0F1B0F1B, 0x0EC90EC9, 0x0E770E77, 0x0E250E25, 
    0x0DD40DD4, 0x0D830D83, 0x0D320D32, 0x0CE10CE1, 0x0C910C91, 0x0C410C41, 0x0BF10BF1, 0x0BA10BA1, 0x0B520B52, 0x0B020B02, 0x0AB30AB3, 0x0A650A65, 0x0A160A16, 0x09C809C8, 0x097B097B, 0x092D092D, 
    0x08E008E0, 0x08930893, 0x08470847, 0x07FA07FA, 0x07AF07AF, 0x07630763, 0x07180718, 0x06CD06CD, 0x06820682, 0x06380638, 0x05EF05EF, 0x05A505A5, 0x055C055C, 0x05140514, 0x04CB04CB, 0x04830483, 
    0x043C043C, 0x03F503F5, 0x03AE03AE, 0x03680368, 0x03220322, 0x02DD02DD, 0x02980298, 0x02540254, 0x02100210, 0x01CC01CC, 0x01890189, 0x01460146, 0x01040104, 0x00C200C2, 0x00810081, 0x00400040, 
    0x00000000, 0xFFC0FFC0, 0xFF82FF82, 0xFF44FF44, 0xFF08FF08, 0xFECCFECC, 0xFE92FE92, 0xFE58FE58, 0xFE20FE20, 0xFDE8FDE8, 0xFDB1FDB1, 0xFD7BFD7B, 0xFD46FD46, 0xFD12FD12, 0xFCDFFCDF, 0xFCADFCAD, 
    0xFC7CFC7C, 0xFC4CFC4C, 0xFC1CFC1C, 0xFBEEFBEE, 0xFBC0FBC0, 0xFB93FB93, 0xFB68FB68, 0xFB3DFB3D, 0xFB12FB12, 0xFAE9FAE9, 0xFAC1FAC1, 0xFA99FA99, 0xFA73FA73, 0xFA4DFA4D, 0xFA28FA28, 0xFA03FA03, 
    0xF9E0F9E0, 0xF9BDF9BD, 0xF99CF99C, 0xF97BF97B, 0xF95AF95A, 0xF93BF93B, 0xF91CF91C, 0xF8FFF8FF, 0xF8E2F8E2, 0xF8C5F8C5, 0xF8AAF8AA, 0xF88FF88F, 0xF875F875, 0xF85CF85C, 0xF843F843, 0xF82BF82B, 
    0xF814F814, 0xF7FEF7FE, 0xF7E8F7E8, 0xF7D3F7D3, 0xF7BFF7BF, 0xF7ABF7AB, 0xF798F798, 0xF786F786, 0xF774F774, 0xF764F764, 0xF753F753, 0xF744F744, 0xF735F735, 0xF727F727, 0xF719F719, 0xF70CF70C, 
    0xF700F700, 0xF6F4F6F4, 0xF6E9F6E9, 0xF6DFF6DF, 0xF6D5F6D5, 0xF6CCF6CC, 0xF6C3F6C3, 0xF6BBF6BB, 0xF6B4F6B4, 0xF6ADF6AD, 0xF6A6F6A6, 0xF6A1F6A1, 0xF69BF69B, 0xF697F697, 0xF693F693, 0xF68FF68F, 
    0xF68CF68C, 0xF68AF68A, 0xF688F688, 0xF686F686, 0xF685F685, 0xF685F685, 0xF685F685, 0xF685F685, 0xF686F686, 0xF688F688, 0xF68AF68A, 0xF68DF68D, 0xF690F690, 0xF693F693, 0xF697F697, 0xF69BF69B, 
    0xF6A0F6A0, 0xF6A5F6A5, 0xF6ABF6AB, 0xF6B1F6B1, 0xF6B7F6B7, 0xF6BEF6BE, 0xF6C6F6C6, 0xF6CDF6CD, 0xF6D6F6D6, 0xF6DEF6DE, 0xF6E7F6E7, 0xF6F0F6F0, 0xF6FAF6FA, 0xF704F704, 0xF70EF70E, 0xF719F719, 
    0xF724F724, 0xF72FF72F, 0xF73BF73B, 0xF747F747, 0xF754F754, 0xF760F760, 0xF76DF76D, 0xF77BF77B, 0xF788F788, 0xF796F796, 0xF7A5F7A5, 0xF7B3F7B3, 0xF7C2F7C2, 0xF7D1F7D1, 0xF7E1F7E1, 0xF7F0F7F0, 
    0xF800F800, 0xF810F810, 0xF820F820, 0xF831F831, 0xF842F842, 0xF853F853, 0xF864F864, 0xF876F876, 0xF888F888, 0xF899F899, 0xF8ACF8AC, 0xF8BEF8BE, 0xF8D0F8D0, 0xF8E3F8E3, 0xF8F6F8F6, 0xF909F909, 
    0xF91CF91C, 0xF92FF92F, 0xF943F943, 0xF956F956, 0xF96AF96A, 0xF97EF97E, 0xF992F992, 0xF9A6F9A6, 0xF9BAF9BA, 0xF9CFF9CF, 0xF9E3F9E3, 0xF9F8F9F8, 0xFA0DFA0D, 0xFA21FA21, 0xFA36FA36, 0xFA4BFA4B, 
    0xFA60FA60, 0xFA75FA75, 0xFA8AFA8A, 0xFA9FFA9F, 0xFAB4FAB4, 0xFACAFACA, 0xFADFFADF, 0xFAF4FAF4, 0xFB0AFB0A, 0xFB1FFB1F, 0xFB34FB34, 0xFB49FB49, 0xFB5FFB5F, 0xFB74FB74, 0xFB89FB89, 0xFB9FFB9F, 
    0xFBB4FBB4, 0xFBC9FBC9, 0xFBDEFBDE, 0xFBF4FBF4, 0xFC09FC09, 0xFC1EFC1E, 0xFC33FC33, 0xFC48FC48, 0xFC5CFC5C, 0xFC71FC71, 0xFC86FC86, 0xFC9BFC9B, 0xFCAFFCAF, 0xFCC3FCC3, 0xFCD8FCD8, 0xFCECFCEC, 
    0xFD00FD00, 0xFD14FD14, 0xFD28FD28, 0xFD3BFD3B, 0xFD4FFD4F, 0xFD62FD62, 0xFD76FD76, 0xFD89FD89, 0xFD9CFD9C, 0xFDAEFDAE, 0xFDC1FDC1, 0xFDD3FDD3, 0xFDE5FDE5, 0xFDF7FDF7, 0xFE09FE09, 0xFE1BFE1B, 
    0xFE2CFE2C, 0xFE3DFE3D, 0xFE4EFE4E, 0xFE5FFE5F, 0xFE6FFE6F, 0xFE7FFE7F, 0xFE8FFE8F, 0xFE9FFE9F, 0xFEAEFEAE, 0xFEBEFEBE, 0xFECDFECD, 0xFEDBFEDB, 0xFEEAFEEA, 0xFEF8FEF8, 0xFF05FF05, 0xFF13FF13, 
    0xFF20FF20, 0xFF2DFF2D, 0xFF39FF39, 0xFF46FF46, 0xFF51FF51, 0xFF5DFF5D, 0xFF68FF68, 0xFF73FF73, 0xFF7EFF7E, 0xFF88FF88, 0xFF91FF91, 0xFF9BFF9B, 0xFFA4FFA4, 0xFFACFFAC, 0xFFB5FFB5, 0xFFBDFFBD, 
    0xFFC4FFC4, 0xFFCBFFCB, 0xFFD2FFD2, 0xFFD8FFD8, 0xFFDEFFDE, 0xFFE3FFE3, 0xFFE8FFE8, 0xFFECFFEC, 0xFFF0FFF0, 0xFFF4FFF4, 0xFFF7FFF7, 0xFFFAFFFA, 0xFFFCFFFC, 0xFFFEFFFE, 0xFFFFFFFF, 0x00000000, 
    0x00000000 
};
/*class _CAutoInti_SinXDivX_Table_MMX {
 private: 
 void _Inti_SinXDivX_Table_MMX()
 {
 for (long i=0;i<=(2<<8);++i)
 {
 unsigned short t=(unsigned short)(long(0.5+(1<<14)*SinXDivX(i*(1.0/(256)))));
 unsigned long tl=t | (((unsigned long)t)<<16);
 SinXDivX_Table_MMX[i]=tl;
 }
 };
 public:
 _CAutoInti_SinXDivX_Table_MMX() { _Inti_SinXDivX_Table_MMX(); }
 };
 static _CAutoInti_SinXDivX_Table_MMX __tmp_CAutoInti_SinXDivX_Table_MMX;*/

#pragma warning(disable:4799)

void __declspec(naked) _private_ThreeOrder_Fast_MMX()
{
    asm
    {
        movd        mm1,dword ptr [edx]
        movd        mm2,dword ptr [edx+4]
        movd        mm3,dword ptr [edx+8]
        movd        mm4,dword ptr [edx+12]
        movd        mm5,dword ptr [(offset SinXDivX_Table_MMX)+256*4+eax*4]
        movd        mm6,dword ptr [(offset SinXDivX_Table_MMX)+eax*4]
        punpcklbw   mm1,mm7
        punpcklbw   mm2,mm7
        punpcklwd   mm5,mm5
        punpcklwd   mm6,mm6
        psllw       mm1,7
        psllw       mm2,7
        pmulhw      mm1,mm5
        pmulhw      mm2,mm6
        punpcklbw   mm3,mm7
        punpcklbw   mm4,mm7
        movd        mm5,dword ptr [(offset SinXDivX_Table_MMX)+256*4+ecx*4]
        movd        mm6,dword ptr [(offset SinXDivX_Table_MMX)+512*4+ecx*4]
        punpcklwd   mm5,mm5
        punpcklwd   mm6,mm6
        psllw       mm3,7
        psllw       mm4,7
        pmulhw      mm3,mm5
        pmulhw      mm4,mm6
        paddsw      mm1,mm2
        paddsw      mm3,mm4
        movd        mm6,dword ptr [ebx] //v
        paddsw      mm1,mm3
        punpcklwd   mm6,mm6
        
        pmulhw      mm1,mm6
        add     edx,esi  //+pic.byte_width
        paddsw      mm0,mm1
        
        ret
    }
}

Color32 bicubicFast(const Pixels32Ref& pic,const long srcx_16,const long srcy_16)
{
    UInt32 result;
    asm
    {
        mov     ecx,pic
        mov     eax,srcy_16
        mov     ebx,srcx_16
        movzx   edi,ah //v_8
        mov     edx,[ecx+Pixels32Ref.pdata]
        shr     eax,16
        mov     esi,[ecx+Pixels32Ref.byte_width]
        dec     eax
        movzx   ecx,bh //u_8
        shr     ebx,16
        imul    eax,esi
        lea     edx,[edx+ebx*4-4]
        add     edx,eax //pixel
        
        mov     eax,ecx
        neg     ecx
        
        pxor    mm7,mm7  //0
        //mov     edx,pixel
        pxor    mm0,mm0  //result=0
        //lea     eax,auv_7
        
        lea    ebx,[(offset SinXDivX_Table_MMX)+256*4+edi*4]
        call  _private_ThreeOrder_Fast_MMX
        lea    ebx,[(offset SinXDivX_Table_MMX)+edi*4]
        call  _private_ThreeOrder_Fast_MMX
        neg    edi
        lea    ebx,[(offset SinXDivX_Table_MMX)+256*4+edi*4]
        call  _private_ThreeOrder_Fast_MMX
        lea    ebx,[(offset SinXDivX_Table_MMX)+512*4+edi*4]
        call  _private_ThreeOrder_Fast_MMX
        
        psraw     mm0,3
        packuswb  mm0,mm7
        movd      result,mm0
    }
    return Color32(result);
}

#pragma warning(default:4799)

#else

static long _SinXDivX_Table_8[(2<<8)+1]={
    0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FE, 
    0x000000FE, 0x000000FE, 0x000000FE, 0x000000FD, 0x000000FD, 0x000000FD, 0x000000FC, 0x000000FC, 0x000000FC, 0x000000FB, 0x000000FB, 0x000000FB, 0x000000FA, 0x000000FA, 0x000000F9, 0x000000F9, 
    0x000000F8, 0x000000F8, 0x000000F8, 0x000000F7, 0x000000F7, 0x000000F6, 0x000000F6, 0x000000F5, 0x000000F4, 0x000000F4, 0x000000F3, 0x000000F3, 0x000000F2, 0x000000F2, 0x000000F1, 0x000000F0, 
    0x000000F0, 0x000000EF, 0x000000EE, 0x000000EE, 0x000000ED, 0x000000EC, 0x000000EC, 0x000000EB, 0x000000EA, 0x000000E9, 0x000000E9, 0x000000E8, 0x000000E7, 0x000000E6, 0x000000E6, 0x000000E5, 
    0x000000E4, 0x000000E3, 0x000000E2, 0x000000E2, 0x000000E1, 0x000000E0, 0x000000DF, 0x000000DE, 0x000000DD, 0x000000DC, 0x000000DB, 0x000000DA, 0x000000DA, 0x000000D9, 0x000000D8, 0x000000D7, 
    0x000000D6, 0x000000D5, 0x000000D4, 0x000000D3, 0x000000D2, 0x000000D1, 0x000000D0, 0x000000CF, 0x000000CE, 0x000000CD, 0x000000CC, 0x000000CB, 0x000000CA, 0x000000C9, 0x000000C8, 0x000000C7, 
    0x000000C6, 0x000000C4, 0x000000C3, 0x000000C2, 0x000000C1, 0x000000C0, 0x000000BF, 0x000000BE, 0x000000BD, 0x000000BC, 0x000000BA, 0x000000B9, 0x000000B8, 0x000000B7, 0x000000B6, 0x000000B5, 
    0x000000B3, 0x000000B2, 0x000000B1, 0x000000B0, 0x000000AF, 0x000000AD, 0x000000AC, 0x000000AB, 0x000000AA, 0x000000A9, 0x000000A7, 0x000000A6, 0x000000A5, 0x000000A4, 0x000000A2, 0x000000A1, 
    0x000000A0, 0x0000009F, 0x0000009D, 0x0000009C, 0x0000009B, 0x0000009A, 0x00000098, 0x00000097, 0x00000096, 0x00000095, 0x00000093, 0x00000092, 0x00000091, 0x0000008F, 0x0000008E, 0x0000008D, 
    0x0000008C, 0x0000008A, 0x00000089, 0x00000088, 0x00000086, 0x00000085, 0x00000084, 0x00000082, 0x00000081, 0x00000080, 0x0000007E, 0x0000007D, 0x0000007C, 0x0000007A, 0x00000079, 0x00000078, 
    0x00000076, 0x00000075, 0x00000074, 0x00000073, 0x00000071, 0x00000070, 0x0000006F, 0x0000006D, 0x0000006C, 0x0000006B, 0x00000069, 0x00000068, 0x00000067, 0x00000065, 0x00000064, 0x00000063, 
    0x00000061, 0x00000060, 0x0000005F, 0x0000005D, 0x0000005C, 0x0000005B, 0x00000059, 0x00000058, 0x00000057, 0x00000055, 0x00000054, 0x00000053, 0x00000051, 0x00000050, 0x0000004F, 0x0000004D, 
    0x0000004C, 0x0000004B, 0x00000049, 0x00000048, 0x00000047, 0x00000045, 0x00000044, 0x00000043, 0x00000042, 0x00000040, 0x0000003F, 0x0000003E, 0x0000003C, 0x0000003B, 0x0000003A, 0x00000039, 
    0x00000037, 0x00000036, 0x00000035, 0x00000034, 0x00000032, 0x00000031, 0x00000030, 0x0000002F, 0x0000002D, 0x0000002C, 0x0000002B, 0x0000002A, 0x00000028, 0x00000027, 0x00000026, 0x00000025, 
    0x00000024, 0x00000022, 0x00000021, 0x00000020, 0x0000001F, 0x0000001E, 0x0000001C, 0x0000001B, 0x0000001A, 0x00000019, 0x00000018, 0x00000017, 0x00000015, 0x00000014, 0x00000013, 0x00000012, 
    0x00000011, 0x00000010, 0x0000000F, 0x0000000E, 0x0000000D, 0x0000000B, 0x0000000A, 0x00000009, 0x00000008, 0x00000007, 0x00000006, 0x00000005, 0x00000004, 0x00000003, 0x00000002, 0x00000001, 
    0x00000000, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFD, 0xFFFFFFFC, 0xFFFFFFFB, 0xFFFFFFFA, 0xFFFFFFF9, 0xFFFFFFF8, 0xFFFFFFF8, 0xFFFFFFF7, 0xFFFFFFF6, 0xFFFFFFF5, 0xFFFFFFF4, 0xFFFFFFF3, 0xFFFFFFF3, 
    0xFFFFFFF2, 0xFFFFFFF1, 0xFFFFFFF0, 0xFFFFFFF0, 0xFFFFFFEF, 0xFFFFFFEE, 0xFFFFFFEE, 0xFFFFFFED, 0xFFFFFFEC, 0xFFFFFFEC, 0xFFFFFFEB, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFE9, 0xFFFFFFE9, 0xFFFFFFE8, 
    0xFFFFFFE8, 0xFFFFFFE7, 0xFFFFFFE6, 0xFFFFFFE6, 0xFFFFFFE5, 0xFFFFFFE5, 0xFFFFFFE4, 0xFFFFFFE4, 0xFFFFFFE4, 0xFFFFFFE3, 0xFFFFFFE3, 0xFFFFFFE2, 0xFFFFFFE2, 0xFFFFFFE1, 0xFFFFFFE1, 0xFFFFFFE1, 
    0xFFFFFFE0, 0xFFFFFFE0, 0xFFFFFFE0, 0xFFFFFFDF, 0xFFFFFFDF, 0xFFFFFFDF, 0xFFFFFFDE, 0xFFFFFFDE, 0xFFFFFFDE, 0xFFFFFFDE, 0xFFFFFFDD, 0xFFFFFFDD, 0xFFFFFFDD, 0xFFFFFFDD, 0xFFFFFFDC, 0xFFFFFFDC, 
    0xFFFFFFDC, 0xFFFFFFDC, 0xFFFFFFDC, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 
    0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 0xFFFFFFDA, 
    0xFFFFFFDA, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDB, 0xFFFFFFDC, 0xFFFFFFDC, 0xFFFFFFDC, 0xFFFFFFDC, 0xFFFFFFDC, 0xFFFFFFDC, 
    0xFFFFFFDD, 0xFFFFFFDD, 0xFFFFFFDD, 0xFFFFFFDD, 0xFFFFFFDD, 0xFFFFFFDE, 0xFFFFFFDE, 0xFFFFFFDE, 0xFFFFFFDE, 0xFFFFFFDE, 0xFFFFFFDF, 0xFFFFFFDF, 0xFFFFFFDF, 0xFFFFFFDF, 0xFFFFFFE0, 0xFFFFFFE0, 
    0xFFFFFFE0, 0xFFFFFFE0, 0xFFFFFFE1, 0xFFFFFFE1, 0xFFFFFFE1, 0xFFFFFFE1, 0xFFFFFFE2, 0xFFFFFFE2, 0xFFFFFFE2, 0xFFFFFFE2, 0xFFFFFFE3, 0xFFFFFFE3, 0xFFFFFFE3, 0xFFFFFFE4, 0xFFFFFFE4, 0xFFFFFFE4, 
    0xFFFFFFE4, 0xFFFFFFE5, 0xFFFFFFE5, 0xFFFFFFE5, 0xFFFFFFE6, 0xFFFFFFE6, 0xFFFFFFE6, 0xFFFFFFE7, 0xFFFFFFE7, 0xFFFFFFE7, 0xFFFFFFE8, 0xFFFFFFE8, 0xFFFFFFE8, 0xFFFFFFE9, 0xFFFFFFE9, 0xFFFFFFE9, 
    0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEB, 0xFFFFFFEB, 0xFFFFFFEB, 0xFFFFFFEC, 0xFFFFFFEC, 0xFFFFFFEC, 0xFFFFFFED, 0xFFFFFFED, 0xFFFFFFED, 0xFFFFFFEE, 0xFFFFFFEE, 0xFFFFFFEE, 
    0xFFFFFFEF, 0xFFFFFFEF, 0xFFFFFFEF, 0xFFFFFFF0, 0xFFFFFFF0, 0xFFFFFFF0, 0xFFFFFFF1, 0xFFFFFFF1, 0xFFFFFFF1, 0xFFFFFFF2, 0xFFFFFFF2, 0xFFFFFFF2, 0xFFFFFFF3, 0xFFFFFFF3, 0xFFFFFFF3, 0xFFFFFFF4, 
    0xFFFFFFF4, 0xFFFFFFF4, 0xFFFFFFF5, 0xFFFFFFF5, 0xFFFFFFF5, 0xFFFFFFF6, 0xFFFFFFF6, 0xFFFFFFF6, 0xFFFFFFF6, 0xFFFFFFF7, 0xFFFFFFF7, 0xFFFFFFF7, 0xFFFFFFF8, 0xFFFFFFF8, 0xFFFFFFF8, 0xFFFFFFF8, 
    0xFFFFFFF9, 0xFFFFFFF9, 0xFFFFFFF9, 0xFFFFFFF9, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFB, 0xFFFFFFFB, 0xFFFFFFFB, 0xFFFFFFFB, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 
    0xFFFFFFFC, 0xFFFFFFFD, 0xFFFFFFFD, 0xFFFFFFFD, 0xFFFFFFFD, 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
    0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000
};
const  long*  SinXDivX_Table_8=&_SinXDivX_Table_8[0];
/*class _CAuto_inti_SinXDivX_Table
 {
 private:	
 static void _Inti_SinXDivX_Table()
 {
 for (long i=0;i<=(2<<8);++i)
 _SinXDivX_Table_8[i]=long(0.5+256*SinXDivX(i*(1.0/(256))));
 };
 public:
 _CAuto_inti_SinXDivX_Table() {
 _Inti_SinXDivX_Table();
 }
 };
 static _CAuto_inti_SinXDivX_Table _Auto_inti_SinXDivX_Table;*/


Color32 bicubicFast(const Pixels32Ref& pic,const long srcx_16,const long srcy_16)
{
    long u_8=(srcx_16 & 0xFFFF)>>8;
    long v_8=(srcy_16 & 0xFFFF)>>8;
    const Color32* pixel=&pic.pixels((srcx_16>>16)-1,(srcy_16>>16)-1);
    long pic_byte_width=pic.byte_width;
    
    long au_8[4],av_8[4];
    //
    au_8[0]=SinXDivX_Table_8[(1<<8)+u_8];
    au_8[1]=SinXDivX_Table_8[u_8];
    au_8[2]=SinXDivX_Table_8[(1<<8)-u_8];
    au_8[3]=SinXDivX_Table_8[(2<<8)-u_8];
    av_8[0]=SinXDivX_Table_8[(1<<8)+v_8];
    av_8[1]=SinXDivX_Table_8[v_8];
    av_8[2]=SinXDivX_Table_8[(1<<8)-v_8];
    av_8[3]=SinXDivX_Table_8[(2<<8)-v_8];
    
    long sR=0,sG=0,sB=0,sA=0;
    for (long i=0;i<4;++i)
    {
        long aB=au_8[0]*pixel[0].b + au_8[1]*pixel[1].b + au_8[2]*pixel[2].b + au_8[3]*pixel[3].b;
        long aG=au_8[0]*pixel[0].g + au_8[1]*pixel[1].g + au_8[2]*pixel[2].g + au_8[3]*pixel[3].g;
        long aR=au_8[0]*pixel[0].r + au_8[1]*pixel[1].r + au_8[2]*pixel[2].r + au_8[3]*pixel[3].r;
        long aA=au_8[0]*pixel[0].a + au_8[1]*pixel[1].a + au_8[2]*pixel[2].a + au_8[3]*pixel[3].a;
        sA+=aA*av_8[i];
        sR+=aR*av_8[i];
        sG+=aG*av_8[i];
        sB+=aB*av_8[i];
        ((UInt8*&)pixel)+=pic_byte_width;
    }
    
    Color32 result;
    result.b=color_table[sB>>16];
    result.g=color_table[sG>>16];
    result.r=color_table[sR>>16];
    result.a=color_table[sA>>16];
    return result;
}
#endif

Color32 bicubicBorder(const Pixels32Ref& pic,const long srcx_16,const long srcy_16)
{
    long x0_sub1=(srcx_16>>16)-1;
    long y0_sub1=(srcy_16>>16)-1;
    long u_16_add1=(srcx_16 & 0x0000FFFF)+(1<<16);
    long v_16_add1=(srcy_16 & 0x0000FFFF)+(1<<16);
    
    Color32 pixels[16];
    
    Color32* pPixels=&pixels[0];
    for (long i=0;i<4;++i)
    {
        long y=y0_sub1+i;
        pPixels[0]=pic.getPixelsBorder(x0_sub1+0,y);
        pPixels[1]=pic.getPixelsBorder(x0_sub1+1,y);
        pPixels[2]=pic.getPixelsBorder(x0_sub1+2,y);
        pPixels[3]=pic.getPixelsBorder(x0_sub1+3,y);
        pPixels=&pPixels[4];
    }
    
    Pixels32Ref npic(&pixels[0],4,4,4*sizeof(Color32));
    return bicubicFast(npic,u_16_add1,v_16_add1);
}